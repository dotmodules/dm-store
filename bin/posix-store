#!/bin/sh
#==============================================================================
#                   _                 _
#                  (_)               | |
#   _ __   ___  ___ ___  ________ ___| |_ ___  _ __ ___ 
#  | '_ \ / _ \/ __| \ \/ /______/ __| __/ _ \| '__/ _ \
#  | |_) | (_) \__ \ |>  <       \__ \ || (_) | | |  __/
#  | .__/ \___/|___/_/_/\_\      |___/\__\___/|_|  \___|
#  | |
#==|_|=========================================================================

#==============================================================================
# SANE ENVIRONMENT
#==============================================================================

set -e  # exit on error
set -u  # prevent unset variable expansion

#==============================================================================
# PATH CHANGE
#==============================================================================

# This is the only part where the code has to be prepared for missing tool
# capabilities. It is known that on MacOS readlink does not support the -f flag
# by default.
if target_path="$(readlink -f "$0" 2>/dev/null)"
then
  cd "$(dirname "$target_path")"
else
  # If the path cannot be determined with readlink, we have to check if this
  # script is executed through a symlink or not.
  if [ -L "$0" ]
  then
    # If the current script is executed through a symlink, we are out of luck,
    # because without readlink, there is no universal solution for this problem
    # that uses the default shell toolset.
    echo "symlinked script won't work on this machine.."
  else
    cd "$(dirname "$0")"
  fi
fi

#==============================================================================
# LIBRARY SOURCE POINT
#==============================================================================

# Relative path from the current path to the posix store repo root. Since this
# script is only linked to a directory that is available in the PATH, the
# execution will happen in place here in the repository bin directory.
POSIX_STORE__CONFIG__MANDATORY__SUBMODULE_PATH_PREFIX='..'

# shellcheck source=../posix_store.sh
. "${POSIX_STORE__CONFIG__MANDATORY__SUBMODULE_PATH_PREFIX}/posix_store.sh"

#==============================================================================
# ENVIRONMENT SETUP
#==============================================================================

POSIX_STORE__STORE_FILE__NAME='posix_store.store'

if [ -z "${POSIX_STORE__STORE_FILE__PATH+x}" ]
then
  if [ -z "${XDG_STATE_HOME+x}" ]
  then
    POSIX_STORE__STORE_FILE__PATH="${HOME}/.local/state/${POSIX_STORE__STORE_FILE__NAME}"
  else
    POSIX_STORE__STORE_FILE__PATH="${XDG_STATE_HOME}/${POSIX_STORE__STORE_FILE__NAME}"
  fi
fi

POSIX_STORE__VERSION="$(posix_adapter__cat '../VERSION')"

#==============================================================================
# COLOR MANAGEMENT
#==============================================================================

# Checking the availibility and usability of tput. If it is available and
# usable we can set the global coloring variables with it by expecting a
# possibly missing color/modifier.
if posix_adapter__tput__is_available
then
  RED="$(posix_adapter__tput setaf 1)"
  BLUE="$(posix_adapter__tput setaf 4)"
  RESET="$(posix_adapter__tput sgr0)"
  BOLD="$(posix_adapter__tput bold)"
  DIM="$(posix_adapter__tput dim)"
else
  RED=''
  # Used internally by the library.
  # shellcheck disable=SC2034
  BLUE=''
  RESET=''
  # Used internally by the library.
  # shellcheck disable=SC2034
  DIM=''
fi

#==============================================================================
# HELP
#==============================================================================

POSIX_STORE__HELP="$(cat <<-END

${BOLD}NAME${RESET}

    ${BOLD}posix-store${RESET} - simple key-value store ${POSIX_STORE__VERSION}

    Permanent key-value store  solution with no external dependencies written
    in POSIX compliant shell. Entries will be saved into the store file in an
    encoded way,  that means an entry  can hold arbitrary lines  of arbitrary
    characters.

${BOLD}SYNOPSYS${RESET}

    ${BOLD}posix-store [--debug] set <key> <value>${RESET}
    ${BOLD}posix-store [--debug] get <key>${RESET}
    ${BOLD}posix-store [--debug] keys${RESET}
    ${BOLD}posix-store [--debug] list${RESET}
    ${BOLD}posix-store [--debug] (delete|del) <key>${RESET}
    ${BOLD}posix-store [--debug] (clear|reset)${RESET}
    ${BOLD}posix-store [--help] ${RESET}

${BOLD}ENVIRONMENT${RESET}

    ${BOLD}POSIX_STORE__STORE_FILE__PATH${RESET}

    Location of the store file. If not defined separately, it will default to
    ${BOLD}\$XDG_STATE_HOME$/${POSIX_STORE__STORE_FILE__NAME}${RESET} or if ${BOLD}\$XDG_STATE_HOME${RESET} is not set, it will
    default to ${BOLD}\$HOME/.local/state/${POSIX_STORE__STORE_FILE__NAME}${RESET}.

${BOLD}DESCRIPTION${RESET}

    ${BOLD}set <key> <value>${RESET}

    Sets the given value for the given key.  If the key already exists in the
    store it will be overridden.    You can use arbitrary characters and even
    multiple lines  for  the  keys  and  values as they will be  stored in an
    encoded way (ascii armored hexadecimal form).

    ${BOLD}get <key>${RESET}

    Retrieve the value for the previously set key. If the key does not exist,
    the call will fail with the status code of ${BOLD}1${RESET}.

    ${BOLD}keys${RESET}

    Print all registered keys by one key per line.  If the  store is empty it
    will fail with the status code of ${BOLD}1${RESET}.

    ${BOLD}list${RESET}

    List the content of the store in the following format ${BOLD}'<key>': '<value>'${RESET}
    by one entry  per line.  If  the store is  empty  it  will fail with  the
    status code of ${BOLD}1${RESET}.

    ${BOLD}delete <key>${RESET}

    Delete the value for the previously set key.  If the key  does not exist,
    the call will fail with the status code of ${BOLD}1${RESET}.

    ${BOLD}(clear|reset)${RESET}

    Removes all entries from the store, but prompts before doing so.

${BOLD}OPTIONS${RESET}

    ${BOLD}--help${RESET}

    Prints out this help message then exits.

    ${BOLD}--version${RESET}

    Prints out the version then exits.

    ${BOLD}--debug${RESET}

    Prints out debug messages during operation  if applicable on the standard
    error output.

${BOLD}AUTHOR${RESET}

    ${BOLD}Tibor Simon${RESET} - while working on the ${BOLD}posixtools${RESET} project.
END
)"

#==============================================================================
# PARAMETER PARSING
#==============================================================================

POSIX_STORE__CONSTANT__MODE__SET='0'
POSIX_STORE__CONSTANT__MODE__GET='1'
POSIX_STORE__CONSTANT__MODE__KEYS='2'
POSIX_STORE__CONSTANT__MODE__LIST='3'
POSIX_STORE__CONSTANT__MODE__DELETE='4'
POSIX_STORE__CONSTANT__MODE__CLEAR='5'

POSIX_STORE__RUNTIME__MODE='__INVALID__'
POSIX_STORE__RUNTIME__KEY='__INVALID__'
POSIX_STORE__RUNTIME__VALUE='__INVALID__'

posix_store__report_invalid_parameters() {
  ___reason="$1"
  ___details="$2"
  echo "${RED}${BOLD}$___reason${RESET}"
  echo "${RED}$___details${RESET}"
  exit 1
}

while [ "$#" -gt '0' ]
do
  case "$1" in
    --help )
      echo "$POSIX_STORE__HELP"
      exit 0
      ;;
    set )
      if [ "$#" -lt '3' ]
      then
        posix_store__report_invalid_parameters \
          'Insufficient [set] parameter count!' \
          'The [set] operation requires a <key> and <value> parameter.'
      fi
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__SET"
      POSIX_STORE__RUNTIME__KEY="$2"
      POSIX_STORE__RUNTIME__VALUE="$3"
      shift
      shift
      shift
      ;;
    get )
      if [ "$#" -lt '2' ]
      then
        posix_store__report_invalid_parameters \
          'Insufficient [get] parameter count!' \
          'The [get] operation requires a <key> parameter.'
      fi
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__GET"
      POSIX_STORE__RUNTIME__KEY="$2"
      shift
      shift
      ;;
    keys )
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__KEYS"
      shift
      ;;
    list )
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__LIST"
      shift
      ;;
    delete|del )
      if [ "$#" -lt '2' ]
      then
        posix_store__report_invalid_parameters \
          'Insufficient [delete] parameter count!' \
          'The [delete] operation requires a <key> parameter.'
      fi
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__DELETE"
      POSIX_STORE__RUNTIME__KEY="$2"
      shift
      shift
      ;;
    clear|reset )
      POSIX_STORE__RUNTIME__MODE="$POSIX_STORE__CONSTANT__MODE__CLEAR"
      shift
      ;;
    --debug )
      # This debug variable will be used in the store lib.
      # shellcheck disable=SC2034
      POSIX_STORE__CONFIG__OPTIONAL__DEBUG_ENABLED='1'
      shift
      ;;
    --version )
      posix_adapter__cat '../VERSION'
      exit 0
      shift
      ;;
    --[!-]* )
      posix_store__report_invalid_parameters \
        "Unexpected option '${1}'!" \
        'You can only use the --debug option.'
      ;;
    -[!-]* )
      posix_store__report_invalid_parameters \
        "Invalid single dashed option '${1}'!" \
        "posix-store only uses double dashed options like '--option'."
      ;;
    * )
      posix_store__report_invalid_parameters \
        'Unexpected parameter!' \
        "Parameter '${1}' is unexpected!"
      ;;
  esac
done

#==============================================================================
# ENTRY POINT
#==============================================================================

posix_store__init "$POSIX_STORE__STORE_FILE__PATH"

case "$POSIX_STORE__RUNTIME__MODE" in
  "$POSIX_STORE__CONSTANT__MODE__SET" )
    posix_store__set "$POSIX_STORE__RUNTIME__KEY" "$POSIX_STORE__RUNTIME__VALUE"
    ;;
  "$POSIX_STORE__CONSTANT__MODE__GET" )
    posix_store__get "$POSIX_STORE__RUNTIME__KEY"
    ;;
  "$POSIX_STORE__CONSTANT__MODE__KEYS" )
    posix_store__keys
    ;;
  "$POSIX_STORE__CONSTANT__MODE__LIST" )
    posix_store__list
    ;;
  "$POSIX_STORE__CONSTANT__MODE__DELETE" )
    posix_store__delete "$POSIX_STORE__RUNTIME__KEY"
    ;;
  "$POSIX_STORE__CONSTANT__MODE__CLEAR" )
    printf '%s' 'Do you really want to clear the store? [y/N] '
    read -r decision
    case $decision in
      y|Y )
        posix_adapter__rm --force --verbose "$POSIX_STORE__STORE_FILE__PATH"
        echo 'Store content deleted!'
        ;;
      * )
        ;;
    esac
    ;;
  * )
    echo "$POSIX_STORE__HELP"
    exit 0
    ;;
esac
